import React from 'react';
import {
  Box,
  Text,
  VStack,
  HStack,
  Button,
  Input,
  Image,
  Grid,
  Card,
  Badge,
  Progress,
  Spinner,
  Alert,
  AlertIcon,
  Stack,
  Flex,
  Spacer,
  Divider,
} from '@chakra-ui/react';

// Available Chakra UI components for dynamic execution
const AVAILABLE_COMPONENTS = {
  Box,
  Text,
  VStack,
  HStack,
  Button,
  Input,
  Image,
  Grid,
  Card,
  Badge,
  Progress,
  Spinner,
  Alert,
  AlertIcon,
  Stack,
  Flex,
  Spacer,
  Divider,
  React,
};

interface ComponentExecutorProps {
  componentCode: string;
  fallbackProps: any;
}

export const ComponentExecutor: React.FC<ComponentExecutorProps> = ({
  componentCode,
  fallbackProps,
}) => {
  try {
    // For MVP, we'll implement a basic JSX parser for simple components
    // This is a simplified version - in production we'd use a proper JSX compiler
    
    // Check if it's an error component
    if (componentCode.includes('Error generating widget') || componentCode.includes('ErrorWidget')) {
      return (
        <Box p={4}>
          <Alert status="error" borderRadius="md">
            <AlertIcon />
            <Text fontSize="sm">Widget generation failed</Text>
          </Alert>
        </Box>
      );
    }

    // Try to extract a basic component structure
    const componentMatch = componentCode.match(/export default function \w+\(\)\s*\{\s*return\s*\(([\s\S]*?)\);\s*\}/);
    
    if (componentMatch) {
      const jsxContent = componentMatch[1].trim();
      
      // Simple parsing for common patterns
      if (jsxContent.includes('<Box') && jsxContent.includes('<Text>')) {
        // Try to extract text content
        const textMatches = jsxContent.match(/<Text[^>]*>(.*?)<\/Text>/g);
        const texts = textMatches ? textMatches.map(match => {
          const content = match.replace(/<Text[^>]*>|<\/Text>/g, '');
          return content.trim();
        }) : [];

        return (
          <Box
            p={4}
            bg="rgba(78, 205, 196, 0.1)"
            borderRadius="lg"
            border="1px solid rgba(78, 205, 196, 0.3)"
            backdropFilter="blur(10px)"
            h="full"
            w="full"
          >
            <VStack spacing={3} align="start">
              <Text color="rgba(78, 205, 196, 0.9)" fontSize="sm" fontWeight="600">
                ðŸ¤– AI-Generated Widget
              </Text>
              {texts.map((text, index) => (
                <Text key={index} color="white" fontSize="sm">
                  {text}
                </Text>
              ))}
              <Text color="rgba(255, 255, 255, 0.6)" fontSize="xs">
                Dynamic component rendered from Claude
              </Text>
            </VStack>
          </Box>
        );
      }
    }

    // Fallback: show that we have a dynamic component but render basic version
    return (
      <Box
        p={4}
        bg="rgba(78, 205, 196, 0.1)"
        borderRadius="lg"
        border="1px solid rgba(78, 205, 196, 0.3)"
        backdropFilter="blur(10px)"
        h="full"
        w="full"
      >
        <VStack spacing={3} align="start">
          <Text color="rgba(78, 205, 196, 0.9)" fontSize="sm" fontWeight="600">
            ðŸ¤– AI-Generated Widget
          </Text>
          <Text color="white" fontSize="sm">
            {fallbackProps.content || fallbackProps.purpose || 'Dynamic widget content'}
          </Text>
          <Box
            p={2}
            bg="rgba(0, 0, 0, 0.2)"
            borderRadius="md"
            maxH="100px"
            overflow="hidden"
          >
            <Text color="rgba(255, 255, 255, 0.5)" fontSize="xs" fontFamily="mono">
              {componentCode.substring(0, 200)}...
            </Text>
          </Box>
          <Text color="rgba(255, 255, 255, 0.6)" fontSize="xs">
            Component generated by Claude API
          </Text>
        </VStack>
      </Box>
    );

  } catch (error) {
    console.error('Component execution error:', error);
    return (
      <Box p={4}>
        <Alert status="error" borderRadius="md">
          <AlertIcon />
          <VStack align="start" spacing={2}>
            <Text fontSize="sm">Error executing dynamic widget</Text>
            <Text fontSize="xs" color="rgba(255, 255, 255, 0.7)">
              {error instanceof Error ? error.message : 'Unknown error'}
            </Text>
          </VStack>
        </Alert>
      </Box>
    );
  }
};